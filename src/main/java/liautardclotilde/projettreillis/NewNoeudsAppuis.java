/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package liautardclotilde.projettreillis;

import java.util.ArrayList;
import liautardclotilde.projettreillis.Classes.Appui_Double;
import liautardclotilde.projettreillis.Classes.Appui_Simple;
import liautardclotilde.projettreillis.Classes.Noeud_Appui;
import liautardclotilde.projettreillis.Classes.Noeuds;
import liautardclotilde.projettreillis.Classes.PointTerrain;
import static liautardclotilde.projettreillis.NewNoeuds.VerifListeNoeudsAppui;

/**
 *
 * @author Elève
 */
public class NewNoeudsAppuis extends Projet_Treillis {
    
    //Il doit pouvoir avoir la liste de Noeud de NewNoeuds mais egalement l'influencer !! (Comment?) 
    //Liste des triangles de terrain
    //private static ArrayList<TriangleTerrain> listeTT=getListeTT ();
    //Le terrain
    //private static Terrain T=getTerrain ();
    
    /**
     * Creates new form NewNoeudsAppuis
     */
    public NewNoeudsAppuis() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        alpha = new javax.swing.JTextField();
        TriangleT = new javax.swing.JSpinner();
        P1 = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        P2 = new javax.swing.JSpinner();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        Type = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("New Noeud Appui");

        jLabel1.setText("Triangle Terrain:");

        jLabel2.setText("- Point 1 (P1):");

        jLabel3.setText("- Point 2 (P2):");

        jLabel4.setText("Position sur le Segment P1/P2 (alpha): ");

        jLabel5.setText("Point du Triangle Terrain:");

        jButton1.setText("Annuler");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Annuler(evt);
            }
        });

        jButton2.setText("Suivant");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Suivant(evt);
            }
        });

        jButton3.setText("Terminer");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Terminer(evt);
            }
        });

        jButton4.setText("Créer un Noeud (Simple)");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewNoeuds(evt);
            }
        });

        jLabel6.setText("Type:");

        Type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Appui_Double", "Appui_Simple" }));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("α: Nombre compris entre 0 et 1 qui rend compte de\n la position du noeud sur le segment de triangle de\nterrain: α proche de 1 : Noeud appui + proche \nde P2 α proche de 0: noeud appui + proche de \nP1 EX: \n\n- si alpha = 0.5 , alors le noeud est placé au\n millieu de la barre i.e. à 50% de la longueur \ndu segment du triangle de terrain.\n- si alpha = 0.2 , alors le noeud est placé \nplus proche d'un des deux point du triangle de \nterrain. i.e. à 20% de la longueur du segment \nde triangle de terrain ");
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(79, 79, 79)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(117, 117, 117)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3))))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(alpha, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel1)
                                .addComponent(jLabel3)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel5)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel2))
                                .addComponent(jLabel4)
                                .addComponent(jLabel6))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(P1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(TriangleT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(P2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(Type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(Type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TriangleT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(P1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel5))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(P2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(alpha, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(13, 13, 13)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton2)
                            .addComponent(jButton3))))
                .addContainerGap(103, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Annuler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Annuler
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_Annuler

    private void NewNoeuds(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewNoeuds
        // TODO add your handling code here:
        new NewNoeuds().setVisible(true);
        dispose();
    }//GEN-LAST:event_NewNoeuds

    private void Suivant(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Suivant
        // TODO add your handling code here:

        int u=0;//Variable pour Catch
        int verif=0;
        try{
            int nomTT = ((Integer)TriangleT.getValue());
            int nomPt1 = ((Integer)P1.getValue());
            int nomPt2 = ((Integer)P2.getValue());
            String typeNoeud=Type.getSelectedItem().toString();
            double al=Double.parseDouble(alpha.getText());
            System.out.println("TT:"+nomTT+", nom PT1:"+nomPt1+", nom PT2:"+nomPt2+", alpha:"+al);
            
            PointTerrain P1=new PointTerrain(0,0,0);
            PointTerrain P2=new PointTerrain(0,0,0);
            u=u+1;
            if ((0<=nomPt1&&nomPt1<3)||(0<=nomPt2&&nomPt2<3)){
                u=u+1;
                for (int i=0;i<getlisteTT().size();i++){
                    u=u+1;
                    if (getlisteTT().get(i).getNOM()==nomTT){
                        verif=verif+1;
                        if (getlisteTT().get(i).getPT1().getNom()==nomPt1){
                            P1=getlisteTT().get(i).getPT1();
                        }
                        if (getlisteTT().get(i).getPT2().getNom()==nomPt1){
                            P1=getlisteTT().get(i).getPT2();
                        }
                        if (getlisteTT().get(i).getPT3().getNom()==nomPt1){
                            P1=getlisteTT().get(i).getPT3();
                        }
                    
                        if (getlisteTT().get(i).getPT1().getNom()==nomPt2){
                            P2=getlisteTT().get(i).getPT1();
                        }
                        if (getlisteTT().get(i).getPT2().getNom()==nomPt2){
                            P2=getlisteTT().get(i).getPT2();
                        }
                        if (getlisteTT().get(i).getPT3().getNom()==nomPt2){
                            P2=getlisteTT().get(i).getPT3();
                        }
                        u=u+1;
                        if (P1==P2){
                            new Erreur8().setVisible(true); 
                        }else{
                            Noeuds noeud=new Noeud_Appui(getlisteNoeuds().size()+1,getlisteTT().get(i),P1,P2,al); 
                            if (noeud.Verification_Appartenance_TerrainN(getT())==true){
                                u=u+1;
                                if ("Appui_Double".equals(typeNoeud)){
                                    noeud=new Appui_Double(getlisteTT().get(i),P1,P2,al,getlisteNoeuds().size()+1);
                                    if (VerifListeNoeudsAppui(getlisteNoeuds(),noeud)==true){
                                        getlisteNoeuds().add(noeud);
                                        System.out.println(noeud.toString());
                                        getlisteAD().add(noeud);
                                        alpha.setText("");
                                    }else{
                                        new Erreur6().setVisible(true); 
                                    }
                                }
                                if ("Appui_Simple".equals(typeNoeud)){
                                    noeud=new Appui_Simple(getlisteTT().get(i),P1,P2,al,getlisteNoeuds().size()+1);
                                    if (VerifListeNoeudsAppui(getlisteNoeuds(),noeud)==true){
                                        getlisteNoeuds().add(noeud);
                                        System.out.println(noeud.toString());
                                        getlisteAS().add(noeud);
                                        alpha.setText("");
                                    }else{
                                        new Erreur6().setVisible(true); 
                                    }    
                                }
                            }else{
                                new Erreur6().setVisible(true); 
                            }
                        }
                    }    
                }
                if (verif ==0){
                    new Erreur10().setVisible(true);
                }
            }else{
                new Erreur15().setVisible(true); 
            }
        }catch (NumberFormatException e) {
            if (u==0){
                System.out.println("CATCH1");
                new Erreur2().setVisible(true); 
            }
            if (u==1){
                System.out.println("CATCH2");
            }
            if (u==2){
                System.out.println("CATCH3"); 
            }
            if (u==3){
                System.out.println("CATCH4"); 
            }
            if (u==4){
                System.out.println("CATCH5"); 
            }
            if (u==5){
                System.out.println("CATCH6"); 
            }
        }
    }//GEN-LAST:event_Suivant

    private void Terminer(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Terminer
        // TODO add your handling code here:
        ArrayList<Noeuds> listeN = new ArrayList();
        ArrayList < Noeuds > listead =  new  ArrayList ();
        ArrayList < Noeuds > listeas =  new  ArrayList ();
        
        int u=0;//Variable pour Catch
        int verif=0;
        try{
            int nomTT = ((Integer)TriangleT.getValue());
            int nomPt1 = ((Integer)P1.getValue());
            int nomPt2 = ((Integer)P2.getValue());
            String typeNoeud=Type.getSelectedItem().toString();
            double al=Double.parseDouble(alpha.getText());
            System.out.println("TT:"+nomTT+", nom PT1:"+nomPt1+", nom PT2:"+nomPt2+", alpha:"+al);
            
            PointTerrain P1=new PointTerrain(0,0,0);
            PointTerrain P2=new PointTerrain(0,0,0);
            u=u+1;
            if ((0<=nomPt1&&nomPt1<3)||(0<=nomPt2&&nomPt2<3)){
                u=u+1;
                for (int i=0;i<getlisteTT().size();i++){
                    u=u+1;
                    if (getlisteTT().get(i).getNOM()==nomTT){
                        verif=verif+1;
                        if (getlisteTT().get(i).getPT1().getNom()==nomPt1){
                            P1=getlisteTT().get(i).getPT1();
                        }
                        if (getlisteTT().get(i).getPT2().getNom()==nomPt1){
                            P1=getlisteTT().get(i).getPT2();
                        }
                        if (getlisteTT().get(i).getPT3().getNom()==nomPt1){
                            P1=getlisteTT().get(i).getPT3();
                        }
                    
                        if (getlisteTT().get(i).getPT1().getNom()==nomPt2){
                            P2=getlisteTT().get(i).getPT1();
                        }
                        if (getlisteTT().get(i).getPT2().getNom()==nomPt2){
                            P2=getlisteTT().get(i).getPT2();
                        }
                        if (getlisteTT().get(i).getPT3().getNom()==nomPt2){
                            P2=getlisteTT().get(i).getPT3();
                        }
                        u=u+1;
                        if (P1==P2){
                            new Erreur8().setVisible(true); 
                        }else{
                            Noeuds noeud=new Noeud_Appui(getlisteNoeuds().size()+1,getlisteTT().get(i),P1,P2,al); 
                            if (noeud.Verification_Appartenance_TerrainN(getT())==true){
                                u=u+1;
                                if ("Appui_Double".equals(typeNoeud)){
                                    if (VerifListeNoeudsAppui(getlisteNoeuds(),noeud)==true){
                                        noeud=new Appui_Double(getlisteTT().get(i),P1,P2,al,getlisteNoeuds().size()+1);
                                        listeN.add(noeud);
                                        setlisteNoeuds(listeN);
                                        System.out.println(noeud.toString());
                                        listead.add(noeud);
                                        setlisteAD(listead);
                                        dispose();
                                    }else{
                                        new Erreur6().setVisible(true); 
                                    }
                                }
                                if ("Appui_Simple".equals(typeNoeud)){
                                    noeud=new Appui_Simple(getlisteTT().get(i),P1,P2,al,getlisteNoeuds().size()+1);
                                    if (VerifListeNoeudsAppui(getlisteNoeuds(),noeud)==true){
                                        listeN.add(noeud);
                                        setlisteNoeuds(listeN);
                                        System.out.println(noeud.toString());
                                        listeas.add(noeud);
                                        setlisteAS(listeas);
                                        dispose();
                                    }else{
                                        new Erreur6().setVisible(true); 
                                    }    
                                }
                            }else{
                                new Erreur6().setVisible(true); 
                            }
                        }
                    }    
                }
                if (verif ==0){
                    new Erreur10().setVisible(true);
                }
            }else{
                new Erreur15().setVisible(true); 
            }
        }catch (NumberFormatException e) {
            if (u==0){
                System.out.println("CATCH1");
                new Erreur2().setVisible(true); 
            }
            if (u==1){
                System.out.println("CATCH2");
            }
            if (u==2){
                System.out.println("CATCH3"); 
            }
            if (u==3){
                System.out.println("CATCH4"); 
            }
            if (u==4){
                System.out.println("CATCH5"); 
            }
            if (u==5){
                System.out.println("CATCH6"); 
            }
        }
    }//GEN-LAST:event_Terminer

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewNoeudsAppuis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewNoeudsAppuis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewNoeudsAppuis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewNoeudsAppuis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewNoeudsAppuis().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner P1;
    private javax.swing.JSpinner P2;
    private javax.swing.JSpinner TriangleT;
    private javax.swing.JComboBox<String> Type;
    private javax.swing.JTextField alpha;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
