/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package liautardclotilde.projettreillis;

import java.util.ArrayList;
import java.util.Arrays;
import liautardclotilde.projettreillis.Classes.Barre;
import static liautardclotilde.projettreillis.Classes.Barre.verification_croisement;
import static liautardclotilde.projettreillis.Classes.Barre.verification_croisement_barre_segment;
import liautardclotilde.projettreillis.Classes.Noeuds;
import liautardclotilde.projettreillis.Classes.Catalogue_Barre;
import static liautardclotilde.projettreillis.Classes.Catalogue_Barre.Afficher_Catalogue_Barre;
import liautardclotilde.projettreillis.Classes.Noeud_Simple;
/**
 *
 * @author Elève
 */
public class NewBarre extends Projet_Treillis {
    
    /**
     * Creates new form NewBarre
     */
    public NewBarre() {
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        nomi = new javax.swing.JSpinner();
        nomf = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        TypeBarre = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        Type = new javax.swing.JSpinner();
        newCata = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("NewBarre");

        jLabel1.setText("Noeud initial");

        jLabel2.setText("Noeud final");

        jLabel3.setText("Type (section)");

        TypeBarre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ronde pleine", "Ronde creuse", "Rectangulaire pleine", "Rectangulaire creuse", "Forme L", "Forme I" }));

        jButton1.setText("Annuler");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Annuler(evt);
            }
        });

        jButton2.setText("Terminer");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Terminer(evt);
            }
        });

        jButton3.setText("Suivant");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Suivant(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("Section (Nom, coût, Lmax,Lmin,Rtmax, Rcmax)\n\n0:Ronde pleine (\"1\", 1.5,200,0,45,68)\n1:Ronde Creuse (\"10\", 2,200,0,45,68)\n2:Rectangulaire pleine (\"2\", 2.2,200,0,45,68)\n3:Rectangulaire creuse (\"20\", 4.5,200,0,45,68)\n4:Forme L (\"22\", 4,200,0,45,68)\n5:Forme I (\"222\", 5.3,200,0,45,68);\n\nSi votre treillis vient d'un fichier importé d'une autre \napplication de création de Treillis veuillez afficher\n le nouveau Catalogue de Barre importé et utiliser le \nSpinner (position de type dans le catalogue).");
        jScrollPane1.setViewportView(jTextArea1);

        newCata.setText("Afficher new Catalogue");
        newCata.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Afficher(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(21, 21, 21)
                                        .addComponent(nomf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(nomi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TypeBarre, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(newCata)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(81, 81, 81)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(nomi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(nomf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(TypeBarre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(newCata))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton3)
                    .addComponent(jButton2))
                .addContainerGap(75, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Terminer(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Terminer
        // TODO add your handling code here:
        int u = 0;
        try{
            //int nomNi=Integer.parseInt((String) nomi.getValue());
            int nomNi = ((Integer)nomi.getValue());
            System.out.println(nomNi);
            //int nomNf=Integer.parseInt((String) nomf.getValue());
            int nomNf = ((Integer)nomf.getValue());
            System.out.println(nomNf);
        
            String type=TypeBarre.getSelectedItem().toString();
            System.out.println(type);
            /*
            Ronde pleine
            Ronde creuse
            Rectangulaire pleine
            Rectangulaire creuse
            Forme L
            Forme I 
            */
            Catalogue_Barre Cini=new Catalogue_Barre ();
            int num=0;
            
            if (getCatalogue().getEnsemble_TypeBarre().size()==Cini.getEnsemble_TypeBarre().size()){
                if ("Ronde pleine".equals(type)){
                    num=0;
                }
                if ("Ronde creuse".equals(type)){
                    num=1;
                }
                if ("Rectangulaire pleine".equals(type)){
                    num=2;
                }   
                if ("Rectangulaire creuse".equals(type)){
                    num=3;
                }
                if ("Forme L".equals(type)){
                    num=4;
                }   
                if ("Forme I".equals(type)){
                    num=5;
                }
            }else{
                num = ((Integer)Type.getValue());
            }
            
            System.out.println(num);
            u=u+1;
            Noeuds R1=new Noeud_Simple(0,0,0);  
            Noeuds R2=new Noeud_Simple(0,0,0);
            u=u+1;
            int verif1=0;
            int verif2=0;
            for (int i=0;i<getlisteNoeuds().size();i++){
                //rejouter la condition de la longueur quand Catalogue Barre complet
                if (nomNi==getlisteNoeuds().get(i).getnom()){
                    R1=getlisteNoeuds().get(i);
                }else{
                    verif1=verif1+1;
                }
                if (nomNf==getlisteNoeuds().get(i).getnom()){
                    R2=getlisteNoeuds().get(i);
                }else{
                    verif2=verif2+1;
                } 
            }
        
            u=u+1;
            int croisement=0;
            if ((verif1==getlisteNoeuds().size())||(verif2==getlisteNoeuds().size())){
                new Erreur11().setVisible(true);
            }else{
                if (R1==R2){
                     new Erreur8().setVisible(true);
                }else{
                    Barre B=new Barre (R1,R2,getlisteBarre().size()+1,getCatalogue(),num);
                    u=u+1;//Probleme ici !!
                    int vr=0;
                    for (int j=0;j<getlisteTT().size();j++){
                        vr=0;
                        if (verification_croisement_barre_segment(B,getlisteTT().get(j).getSegment1())==1){
                            croisement=croisement+1;//new Erreur14().setVisible(true);
                            vr=vr+1;
                        }
                        if (verification_croisement_barre_segment(B,getlisteTT().get(j).getSegment2())==1){
                            croisement=croisement+1;
                            vr=vr+1;
                        }
                        if (verification_croisement_barre_segment(B,getlisteTT().get(j).getSegment3())==1){
                            croisement=croisement+1;
                            vr=vr+1;
                        }
                        if (vr==1){
                            croisement=0;
                        }
                    } 
                    if (croisement>1){
                        new Erreur14().setVisible(true);
                    }else{
                        if (VerifListeBarrenulle(getlisteBarre())==true){
                            getlisteBarre().add(B);
                            System.out.println(B.getnom());
                            System.out.println(Arrays.toString(getlisteBarre().toArray()));
                            System.out.println(getlisteBarre().size());
                            dispose();
                            //nomi.setValue("0");
                            //nomf.setValue("0");  
                        }else{
                            u=u+1;
                            int he=0;
                            for (int i=0;i<getlisteBarre().size();i++){
                                if ((getlisteBarre().get(i).getNoeudf()==B.getNoeudf())&&(getlisteBarre().get(i).getNoeudi()==B.getNoeudi())){
                                    new Erreur5().setVisible(true);
                                }
                                if (verification_croisement (getlisteBarre().get(i), B)==0){
                                    he=he+1;
                                }else{ 
                                    getKp().add(getlisteBarre().get(i).getnom());
                                }
                            }
                            if (he>0){
                                System.out.println(B.getnom());
                                getlisteBarre().add(B);
                                System.out.println(Arrays.toString(getlisteBarre().toArray()));
                                System.out.println(getlisteBarre().size());
                                dispose();
                                //nomi.setValue("0");
                                //nomf.setValue("0");
                            }else{
                                if (getKp().size()>1){
                                    dispose();
                                    new Erreur13().setVisible(true);
                                }else{
                                    getlisteBarre().add(B);
                                    System.out.println(Arrays.toString(getlisteBarre().toArray()));
                                    System.out.println(getlisteBarre().size());
                                    setKi(B.getnom());
                                    setKi(getKi());
                                    dispose();
                                    new Erreur12().setVisible(true);
                                }
                            }
                        }
                    }
                }
            }          
        }catch (Exception e) {
            if (u==0){
                new Erreur2().setVisible(true);
                System.out.println("CATCH1: problème type"); 
            }
            if (u==1){
                System.out.println("CATCH2: problème Noeud");
            }
            if (u==2){
                System.out.println("CATCH3: problème recherche Noeud dans liste"); 
            }
            if (u==3){
                System.out.println("CATCH3: problème verif recherche Noeud"); 
            }
            if (u==4){
                System.out.println("CATCH4: problème verif barre nulle"); 
            }
            if (u==5){
                System.out.println("CATCH5: problème croisement et unicité"); 
            }
	}
    }//GEN-LAST:event_Terminer

    private void Annuler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Annuler
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_Annuler
  
    private void Suivant(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Suivant
        // TODO add your handling code here:
        int u = 0;

        try{
            //int nomNi=Integer.parseInt((String) nomi.getValue());
            int nomNi = ((Integer)nomi.getValue());
            System.out.println(nomNi);
            //int nomNf=Integer.parseInt((String) nomf.getValue());
            int nomNf = ((Integer)nomf.getValue());
            System.out.println(nomNf);
        
            String type=TypeBarre.getSelectedItem().toString();
            System.out.println(type);
            /*
            Ronde pleine
            Ronde creuse
            Rectangulaire pleine
            Rectangulaire creuse
            Forme L
            Forme I 
            */
            Catalogue_Barre Cini=new Catalogue_Barre ();
            int num=0;
            
            if (getCatalogue().getEnsemble_TypeBarre().size()==Cini.getEnsemble_TypeBarre().size()){
                if ("Ronde pleine".equals(type)){
                    num=0;
                }
                if ("Ronde creuse".equals(type)){
                    num=1;
                }
                if ("Rectangulaire pleine".equals(type)){
                    num=2;
                }   
                if ("Rectangulaire creuse".equals(type)){
                    num=3;
                }
                if ("Forme L".equals(type)){
                    num=4;
                }   
                if ("Forme I".equals(type)){
                    num=5;
                }
            }else{
                num = ((Integer)Type.getValue());
            }
            
            System.out.println(num);
            u=u+1;
            Noeuds R1=new Noeud_Simple(0,0,0);  
            Noeuds R2=new Noeud_Simple(0,0,0);
            u=u+1;
            int verif1=0;
            int verif2=0;
            for (int i=0;i<getlisteNoeuds().size();i++){
                //rejouter la condition de la longueur quand Catalogue Barre complet
                if (nomNi==getlisteNoeuds().get(i).getnom()){
                    R1=getlisteNoeuds().get(i);
                }else{
                    verif1=verif1+1;
                }
                if (nomNf==getlisteNoeuds().get(i).getnom()){
                    R2=getlisteNoeuds().get(i);
                }else{
                    verif2=verif2+1;
                } 
            }
            int croisement=0;
            u=u+1;
            if ((verif1==getlisteNoeuds().size())||(verif2==getlisteNoeuds().size())){
                new Erreur11().setVisible(true);
            }else{
                if (R1==R2){
                     new Erreur8().setVisible(true);
                }else{
                    Barre B=new Barre (R1,R2,getlisteBarre().size()+1,getCatalogue(),num);
                    u=u+1;//Probleme ici !!
                    int vr=0;
                    for (int j=0;j<getlisteTT().size();j++){
                        vr=0;
                        if (verification_croisement_barre_segment(B,getlisteTT().get(j).getSegment1())==1){
                            croisement=croisement+1;//new Erreur14().setVisible(true);
                            vr=vr+1;
                        }
                        if (verification_croisement_barre_segment(B,getlisteTT().get(j).getSegment2())==1){
                            croisement=croisement+1;
                            vr=vr+1;
                        }
                        if (verification_croisement_barre_segment(B,getlisteTT().get(j).getSegment3())==1){
                            croisement=croisement+1;
                            vr=vr+1;
                        }
                        if (vr==1){
                            croisement=0;
                        }
                    }
                    if (croisement>1){
                        new Erreur14().setVisible(true);
                    }else{
                    if (VerifListeBarrenulle(getlisteBarre())==true){
                        getlisteBarre().add(B);
                        System.out.println(B.getnom());
                        System.out.println(Arrays.toString(getlisteBarre().toArray()));
                        System.out.println(getlisteBarre().size());
                        //nomi.setValue("0");
                        //nomf.setValue("0");  
                    }else{
                        u=u+1;
                        int he=0;
                        for (int i=0;i<getlisteBarre().size();i++){
                            if ((getlisteBarre().get(i).getNoeudf()==B.getNoeudf())&&(getlisteBarre().get(i).getNoeudi()==B.getNoeudi())){
                                new Erreur5().setVisible(true);
                            }
                            if (verification_croisement (getlisteBarre().get(i), B)==0){
                                he=he+1;
                            }else{ 
                                getKp().add(getlisteBarre().get(i).getnom());
                            }
                        }
                        setKp(getKp());
                        if (he>0){
                            System.out.println(B.getnom());
                            getlisteBarre().add(B);
                            System.out.println(Arrays.toString(getlisteBarre().toArray()));
                            System.out.println(getlisteBarre().size());
                            //nomi.setValue("0");
                            //nomf.setValue("0");
                        }else{
                            if (getKp().size()>1){
                                new Erreur13().setVisible(true);
                            }else{
                                getlisteBarre().add(B);
                                System.out.println(Arrays.toString(getlisteBarre().toArray()));
                                System.out.println(getlisteBarre().size());
                                setKi(B.getnom());
                                setKi(getKi());
                                new Erreur12().setVisible(true);
                            }
                        }
                    }
                }
            }
        }
        }catch (Exception e) {
            if (u==0){
                new Erreur2().setVisible(true);
                System.out.println("CATCH1: problème type"); 
            }
            if (u==1){
                System.out.println("CATCH2: problème Noeud");
            }
            if (u==2){
                System.out.println("CATCH3: problème recherche Noeud dans liste"); 
            }
            if (u==3){
                System.out.println("CATCH3: problème verif recherche Noeud"); 
            }
            if (u==4){
                System.out.println("CATCH4: problème verif barre nulle"); 
            }
            if (u==5){
                System.out.println("CATCH5: problème croisement et unicité"); 
            }
	}
    }//GEN-LAST:event_Suivant

    private void Afficher(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Afficher
        // TODO add your handling code here:
        Afficher_Catalogue_Barre(getCatalogue());
    }//GEN-LAST:event_Afficher
    
    //Méthode qui vérifie si listeB vide ou non
    public static boolean VerifListeBarrenulle (ArrayList<Barre> listeBarre){
        if (listeBarre != null && !listeBarre.isEmpty()){
            return false;
        }else{
            return true;
        }
            
    }
    
    //Méthode qui vérifie si listeB vide ou non ou si contient deja une B 
    /*public boolean VerifListeNoeuds (ArrayList<Barre> listeBarre, Barre B){
        int k=0;
        if (listeBarre != null && !listeBarre.isEmpty()){
            for (int i=0;i<listeBarre.size();i++){
                if ((listeBarre.get(i).getNoeudf()==B.getNoeudf())&&(listeBarre.get(i).getNoeudi()==B.getNoeudi())){
                    return false;
                }else{
                    k=k+1;
                }
            }
            if (k==listeBarre.size()){
                return true;
            }else{
                return false;
            }
        }else{
            return true;
        }
    }*/
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewBarre.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewBarre.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewBarre.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewBarre.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewBarre().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner Type;
    private javax.swing.JComboBox<String> TypeBarre;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JButton newCata;
    private javax.swing.JSpinner nomf;
    private javax.swing.JSpinner nomi;
    // End of variables declaration//GEN-END:variables
}
