/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package liautardclotilde.projettreillis;


import java.util.ArrayList;
import java.util.Arrays;
import liautardclotilde.projettreillis.Classes.Appui_Double;
import liautardclotilde.projettreillis.Classes.Appui_Simple;
import liautardclotilde.projettreillis.Classes.Noeud_Simple;
import liautardclotilde.projettreillis.Classes.Noeuds;

/**
 *
 * @author Elève
 */
public class NewNoeuds extends Projet_Treillis {
    
    //Liste de Noeuds
    //private static ArrayList<Noeuds> listeNoeuds= new ArrayList();
    //Liste des triangles de terrain
    //private static ArrayList<TriangleTerrain> listeTT=getListeTT ();
    //Le terrain
    //private static Terrain T=getTerrain ();
    
    /**
     * Creates new form NewNoeuds
     */
    public NewNoeuds() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        Abs = new javax.swing.JTextField();
        Ord = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        type = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("NewNoeuds");

        jLabel1.setText("Abscisse");

        jLabel2.setText("Ordonne");

        jLabel3.setText("Type");

        type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Noeud_Simple", "Appui_Double", "Appui_Simple" }));

        jButton1.setText("Annuler");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Annuler(evt);
            }
        });

        jButton2.setText("Terminer");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Terminer(evt);
            }
        });

        jButton3.setText("Suivant");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Suivant(evt);
            }
        });

        jButton4.setText("Créer un Noeud Appui");
        jButton4.setToolTipText("");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CréerNoeudAppui(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(106, 106, 106)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jButton1)
                            .addGap(110, 110, 110))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2)
                                .addComponent(jLabel3))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(Abs)
                                .addComponent(Ord)
                                .addComponent(type, 0, 120, Short.MAX_VALUE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2))
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(75, 75, 75))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(113, 113, 113)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(Abs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(Ord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap(93, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Annuler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Annuler
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_Annuler

    public static void allNoeuds(){
        for (int i=0;i<getlisteNoeuds().size();i++)
        {
                if (getlisteNoeuds().get(i).getClass()==Noeud_Simple.class){
                    getlisteNS().add(getlisteNoeuds().get(i));
                }
 
                if (getlisteNoeuds().get(i).getClass()==Appui_Simple.class){
                    getlisteAS().add(getlisteNoeuds().get(i));
                }
                if (getlisteNoeuds().get(i).getClass()==Appui_Double.class){
                    getlisteAD().add(getlisteNoeuds().get(i));
                }
        }
    }
    
    private void Suivant(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Suivant
        // TODO add your handling code here:
        int u=0;//Variable pour Catch
        int verif=0;
        try{
            double x=Double.parseDouble(Abs.getText());
            double y=Double.parseDouble(Ord.getText());
            String typeNoeud=type.getSelectedItem().toString();
            Noeuds noeud=new Noeud_Simple (x,y,getlisteNoeuds().size()+1); 
            
            u=u+1;
            //Vérification que le Noeud appartienne à la zone constructible
            if (noeud.Verification_Appartenance_TerrainN(getT())==true){
                //Différence par rapport au type du Noeud
                u=u+1;
                if ((getlisteTT() == null) && (getlisteTT().isEmpty())){
                    if ("Noeud_Simple".equals(typeNoeud)){
                        noeud=new Noeud_Simple (x,y,getlisteNoeuds().size()+1);
                        System.out.println(noeud.toString());
                        u=u+3;
                            if (VerifListeNoeuds(getlisteNoeuds(),noeud)==false){
                                new Erreur5().setVisible(true);
                            }else{ 
                                getlisteNoeuds().add(noeud);
                                getlisteNS().add(noeud);
                                System.out.println(Arrays.toString(getlisteNoeuds().toArray()));
                                System.out.println();
                                Abs.setText("");
                                Ord.setText("");
                            }
                        } 
                }else{
                    for (int i=0;i<getlisteTT().size();i++){
                        if (getlisteTT().get(i).appartenanceTerrainNoeuds(noeud)==true){
                            new Erreur14().setVisible(true); 
                        }else{
                            verif=verif+1;
                        }
                    }
                    if (verif==getlisteTT().size()){
                        if ("Noeud_Simple".equals(typeNoeud)){
                            noeud=new Noeud_Simple (x,y,getlisteNoeuds().size()+1);
                            System.out.println(noeud.toString());
                            u=u+3;
                            if (VerifListeNoeuds(getlisteNoeuds(),noeud)==false){
                                new Erreur5().setVisible(true);
                            }else{ 
                                getlisteNoeuds().add(noeud);
                                getlisteNS().add(noeud);
                                System.out.println(Arrays.toString(getlisteNoeuds().toArray()));
                                System.out.println();
                                Abs.setText("");
                                Ord.setText("");
                            }
                        }
                    }
                }
                
                //changer new methode (Ok sur segment mais pas dedans TT)
                u=u+1;
                if ((getlisteTT() != null) && (!getlisteTT().isEmpty())){
                    
                    u=u+1;
                    if ("Appui_Double".equals(typeNoeud)){
                        for (int i=0;i<getlisteTT().size();i++){
                            if (getlisteTT().get(i).verifNoeudDansTerrainSurLesBords(noeud)==true){
                                noeud = new Appui_Double (x,getlisteTT().get(i),y,getlisteNoeuds().size()+1);
                                verif=verif+1;
                                //TT.getnom()+":("+PT1.getPx()+","+PT1.getPy()+";"+PT2.getPx()+","+PT2.getPy()+";"+PT3.getPx()+","+PT3.getPy()+")"
                                System.out.println(getlisteTT().get(i).toString());
                            }
                        }
                        if (verif==0){
                            new Erreur3().setVisible(true);
                            new Erreur10().setVisible(true);
                        }
                        u=u+2;
                        if (VerifListeNoeudsAppui(getlisteNoeuds(),noeud)==false){
                            new Erreur5().setVisible(true);
                        }else{
                            getlisteNoeuds().add(noeud);
                            getlisteAD().add(noeud);
                            System.out.println(Arrays.toString(getlisteNoeuds().toArray()));
                            System.out.println();
                            Abs.setText("");
                            Ord.setText("");
                        }
                    }
                    
                    u=u+1;
                    if ("Appui_Simple".equals(typeNoeud)){
                        //Boucle qui vérifie pour chaque triangle de Terrain créer (tableau)
                        for (int j=0;j<getlisteTT().size();j++){
                            if (true==getlisteTT().get(j).verifNoeudDansTerrainSurLesBords(noeud)){ 
                                noeud = new Appui_Simple (x,getlisteTT().get(j),y,getlisteNoeuds().size()+1); 
                                verif=verif+1;
                                System.out.println(getlisteTT().get(j).toString());
                            }
                        }
                        if (verif==0){
                            new Erreur3().setVisible(true);
                            new Erreur10().setVisible(true);
                        }
                        u=u+1;
                        if (VerifListeNoeudsAppui(getlisteNoeuds(),noeud)==false){
                            new Erreur5().setVisible(true);
                        }else{
                            getlisteNoeuds().add(noeud);
                            getlisteAS().add(noeud);
                            System.out.println(Arrays.toString(getlisteNoeuds().toArray()));
                            System.out.println();
                            Abs.setText("");
                            Ord.setText("");
                        }
                    }
                }
            }else{
                new Erreur6().setVisible(true); 
            }
        } catch (NumberFormatException e) {
            if (u==0){
                System.out.println("CATCH1");
                new Erreur2().setVisible(true); 
            }
            if (u==1){
                System.out.println("CATCH2: problème appartenance Terrain");
            }
            if (u==2){
                System.out.println("CATCH3: problème type Noeud Simple"); 
            }
            if (u==3){
                System.out.println("CATCH3: problème type Appui Double"); 
            }
            if (u==4){
                System.out.println("CATCH3: problème type Appui Simple"); 
            }
            if (u==5){
                System.out.println("CATCH4: problème verif d'un doublon, liste nulle etc"); 
            }
	}
        //System.out.println("coordonées saisies:"+x+"   "+y+" Type:   "+typeNoeud+"     Liste de noeud : "+listeNoeuds);
    }//GEN-LAST:event_Suivant
    
    //Méthode qui vérifie si listeN vide ou non ou si contient deja un N 
    public static boolean VerifListeNoeuds (ArrayList<Noeuds> listeNoeuds, Noeuds N){
        int k=0;
        if (listeNoeuds != null && !listeNoeuds.isEmpty()){
            for (int i=0;i<listeNoeuds.size();i++){
                if ((listeNoeuds.get(i).getabscisse()==N.getabscisse())&&(listeNoeuds.get(i).getordonne()==N.getordonne())){
                    return false;
                }
            }
        }else{
            return true;
        }
        return true;
    }
    
    //Méthode qui vérifie si listeTT vide ou non ou si contient deja un TT 
    public static boolean VerifListeNoeudsAppui (ArrayList<Noeuds> listeNoeuds, Noeuds N){
        int k=0;
        if (listeNoeuds != null && !listeNoeuds.isEmpty()){
            for (int i=0;i<listeNoeuds.size();i++){
                //absNoeudAppui (PointTerrain PT1, PointTerrain PT2, double alpha)
                if (((listeNoeuds.get(i).getTT()==N.getTT())&&(listeNoeuds.get(i).getNumero()==N.getNumero())&&(listeNoeuds.get(i).getPosition()==N.getPosition()))||((listeNoeuds.get(i).getabscisse()==N.getabscisse())&&(listeNoeuds.get(i).getordonne()==N.getordonne()))){
                    return false;
                }
            }
        }else{
            return true;
        }
        return true;
    }
    
    private void Terminer(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Terminer
        // TODO add your handling code here:
        int u=0;//Variable pour Catch
        int verif=0;
        try{
            double x=Double.parseDouble(Abs.getText());
            double y=Double.parseDouble(Ord.getText());
            String typeNoeud=type.getSelectedItem().toString();
            Noeuds noeud=new Noeud_Simple (x,y,getlisteNoeuds().size()+1); 
            
            u=u+1;
            //Vérification que le Noeud appartienne à la zone constructible
            if (noeud.Verification_Appartenance_TerrainN(getT())==true){
                //Différence par rapport au type du Noeud
                u=u+1;
                if ((getlisteTT() == null) && getlisteTT().isEmpty()){
                    if ("Noeud_Simple".equals(typeNoeud)){
                        noeud=new Noeud_Simple (x,y,getlisteNoeuds().size()+1);
                        System.out.println(noeud.toString());
                        u=u+3;
                            if (VerifListeNoeuds(getlisteNoeuds(),noeud)==false){
                                new Erreur5().setVisible(true);
                            }else{ 
                                getlisteNoeuds().add(noeud);
                                getlisteNS().add(noeud);
                                System.out.println(Arrays.toString(getlisteNoeuds().toArray()));
                                System.out.println();
                                Abs.setText("");
                                Ord.setText("");
                            }
                        } 
                }else{
                    for (int i=0;i<getlisteTT().size();i++){
                        if (getlisteTT().get(i).appartenanceTerrainNoeuds(noeud)==true){
                            new Erreur14().setVisible(true); 
                        }else{
                            verif=verif+1;
                        }
                    }
                    if (verif==getlisteTT().size()){
                        if ("Noeud_Simple".equals(typeNoeud)){
                            noeud=new Noeud_Simple (x,y,getlisteNoeuds().size()+1);
                            System.out.println(noeud.toString());
                            u=u+3;
                            if (VerifListeNoeuds(getlisteNoeuds(),noeud)==false){
                                new Erreur5().setVisible(true);
                            }else{ 
                                getlisteNoeuds().add(noeud);
                                getlisteNS().add(noeud);
                                System.out.println(Arrays.toString(getlisteNoeuds().toArray()));
                                System.out.println();
                                dispose();
                            }
                        }
                    }
                }
                
                //changer new methode (Ok sur segment mais pas dedans TT)
                u=u+1;
                if ((getlisteTT() != null) && (!getlisteTT().isEmpty())){
                    u=u+1;
                    if ("Appui_Double".equals(typeNoeud)){
                        for (int i=0;i<getlisteTT().size();i++){
                            if (getlisteTT().get(i).verifNoeudDansTerrainSurLesBords(noeud)==true){
                                noeud = new Appui_Double (x,getlisteTT().get(i),y,getlisteNoeuds().size()+1);
                                verif=verif+1;
                                //TT.getnom()+":("+PT1.getPx()+","+PT1.getPy()+";"+PT2.getPx()+","+PT2.getPy()+";"+PT3.getPx()+","+PT3.getPy()+")"
                                System.out.println(getlisteTT().get(i).toString());
                            }
                        }
                        if (verif==0){
                            new Erreur3().setVisible(true);
                            new Erreur10().setVisible(true);
                        }
                        u=u+2;
                        if (VerifListeNoeudsAppui(getlisteNoeuds(),noeud)==false){
                            new Erreur5().setVisible(true);
                        }else{
                            getlisteNoeuds().add(noeud);
                            getlisteAD().add(noeud);
                            System.out.println(Arrays.toString(getlisteNoeuds().toArray()));
                            System.out.println();
                            dispose();
                        }
                    }
                    
                    u=u+1;
                    if ("Appui_Simple".equals(typeNoeud)){
                        //Boucle qui vérifie pour chaque triangle de Terrain créer (tableau)
                        for (int j=0;j<getlisteTT().size();j++){
                            if (true==getlisteTT().get(j).verifNoeudDansTerrainSurLesBords(noeud)){ 
                                noeud = new Appui_Simple (x,getlisteTT().get(j),y,getlisteNoeuds().size()+1);
                                verif=verif+1;
                                System.out.println(getlisteTT().get(j).toString());
                            }
                        }
                        if (verif==0){
                            new Erreur3().setVisible(true);
                        }
                        u=u+1;
                        if (VerifListeNoeudsAppui(getlisteNoeuds(),noeud)==false){
                            new Erreur5().setVisible(true);
                        }else{
                            getlisteNoeuds().add(noeud);
                            getlisteAS().add(noeud);
                            System.out.println(Arrays.toString(getlisteNoeuds().toArray()));
                            System.out.println();
                            dispose();
                        }
                    } 
                }
            }else{
                new Erreur6().setVisible(true); 
            }
        } catch (NumberFormatException e) {
            if (u==0){
                System.out.println("CATCH1");
                new Erreur2().setVisible(true); 
            }
            if (u==1){
                System.out.println("CATCH2: problème appartenance Terrain");
            }
            if (u==2){
                System.out.println("CATCH3: problème type Noeud Simple"); 
            }
            if (u==3){
                System.out.println("CATCH3: problème type Appui Double"); 
            }
            if (u==4){
                System.out.println("CATCH3: problème type Appui Simple"); 
            }
            if (u==5){
                System.out.println("CATCH4: problème verif d'un doublon, liste nulle etc"); 
            }
	}
        //System.out.println("coordonées saisies:"+x+"   "+y+" Type:   "+typeNoeud+"     Liste de noeud : "+listeNoeuds);
    }//GEN-LAST:event_Terminer

    private void CréerNoeudAppui(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CréerNoeudAppui
        // TODO add your handling code here:
        if ((getlisteTT() != null) && (!getlisteTT().isEmpty()) && (getlisteTT().size()>=1)){
            new NewNoeudsAppuis().setVisible(true);
            dispose(); 
        }else{
             new Erreur10().setVisible(true);  
        }
    }//GEN-LAST:event_CréerNoeudAppui

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewNoeuds.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewNoeuds.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewNoeuds.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewNoeuds.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewNoeuds().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Abs;
    private javax.swing.JTextField Ord;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JComboBox<String> type;
    // End of variables declaration//GEN-END:variables
}
