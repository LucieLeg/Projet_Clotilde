/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package liautardclotilde.projettreillis;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import liautardclotilde.projettreillis.Classes.Appui_Double;
import liautardclotilde.projettreillis.Classes.Appui_Simple;
import liautardclotilde.projettreillis.Classes.Barre;
import liautardclotilde.projettreillis.Classes.Catalogue_Barre;
import static liautardclotilde.projettreillis.Classes.Catalogue_Barre.Afficher_Catalogue_Barre;
import liautardclotilde.projettreillis.Classes.Noeud_Simple;
import liautardclotilde.projettreillis.Classes.Noeuds;
import liautardclotilde.projettreillis.Classes.PointTerrain;
import liautardclotilde.projettreillis.Classes.Terrain;
import liautardclotilde.projettreillis.Classes.TriangleTerrain;
import liautardclotilde.projettreillis.Classes.TypeBarre;
import static liautardclotilde.projettreillis.NewBarre.VerifListeBarrenulle;
import static liautardclotilde.projettreillis.NewNoeuds.VerifListeNoeuds;
import static liautardclotilde.projettreillis.NewNoeuds.VerifListeNoeudsAppui;
import static liautardclotilde.projettreillis.Projet_Treillis.getlisteBarre;
import static liautardclotilde.projettreillis.Projet_Treillis.getlisteNS;

/**
 *
 * @author Elève
 */
public class OuvrirUnFichier extends Projet_Treillis {

    /**
     * Creates new form OuvrirUnFichier
     */
    public OuvrirUnFichier() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        NomFichier = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Ouvrir");

        jLabel1.setText("Nom du fichier");

        jButton1.setText("Annuler");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Annuler(evt);
            }
        });

        jButton2.setText("Chercher");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Ouverture(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        jLabel2.setText("Programme cherche pour toi");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("Note le nom de ton fichier texte\nsans le txt.");
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(NomFichier, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(NomFichier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2)
                    .addComponent(jButton1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Annuler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Annuler
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_Annuler

    private void Ouverture(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Ouverture
        // TODO add your handling code here:
        String Nf =NomFichier.getText();
        //lecture fichier
        final String NFichier = "C:\\Users\\Elève\\Documents\\"+Nf+".txt"; //à changer dépendant les fichiers
	File fichier = new File(NFichier);
	Scanner scnr;
        
        Terrain Tr;
        Catalogue_Barre Ca = new Catalogue_Barre();
        ArrayList<Barre> listeB = new ArrayList();
        
        try {
            scnr = new Scanner (fichier);
            //instantiation d'une liste contenant chaque mot du fichier  
            ArrayList<String> Mots = new ArrayList<String>(); 
            
            int verif = 0;
            String [] vide = null;
            while (scnr.hasNextLine()){
		//lecture de la ligne
		String line = scnr.nextLine();
                if (line.startsWith("//")==false){
                    /*for (int j=0;j<line.length()-1;j++){
                        if (line.charAt(j)=='/'){
                            verif=j;
                        }
                    }*/
                    line=line.replace(",", ";");
                    line=line.replace("(", "");
                    line=line.replace(")", "");
                    //if (verif==0){
                        //on met les mots dans le tableau parts et on change de ligne à chaque espace rencontré
                        String [] parts = line.split (";");
                        // remplissage dans l'espace mémoire dictionnaire de tous les mots du DICTIONNAIRE
                        for (int i=0;i<parts.length;i++){
                            Mots.add(parts[i]); //Mots = new ArrayList(Arrays.asList(parts));
                        }
                        parts=vide;
                    /*}else{ 
                        String newline=null;
                        for (int j=0;j<verif;j++){
                            newline=newline+line.charAt(j);
                        }
                        //on met les mots dans le tableau parts et on change de ligne à chaque espace rencontré
                         String [] parts = newline.split (";");
                        // remplissage dans l'espace mémoire dictionnaire de tous les mots du DICTIONNAIRE
                        for (int i=0;i<parts.length;i++){
                            Mots.add(parts[i]); //Mots = new ArrayList(Arrays.asList(parts));
                        }
                        parts=vide;
                    }*/
                }
            }
            if ((getlisteTT() != null) && (!getlisteTT().isEmpty())){
                for (int i=0;i<getlisteTT().size();i++){
                    getlisteTT().remove(i);
                }
            }
            
            if ((getlisteNoeuds() != null) && (!getlisteNoeuds().isEmpty())){
                for (int i=0;i<getlisteNoeuds().size();i++){
                    getlisteNoeuds().remove(i);
                }
            }
            
            if ((getlisteBarre() != null) && (!getlisteBarre().isEmpty())){
                for (int i=0;i<getlisteBarre().size();i++){
                    getlisteBarre().remove(i);
                }
            }
            
            System.out.println(Arrays.toString(Mots.toArray()));
            //on a terminer le traitement du Fichier
            int n=0;
            ArrayList<TypeBarre > tableauTB = new ArrayList();
            
            for (int i=0;i<Mots.size();i++){
                if ("ZoneConstructible".equals(Mots.get(i))){
                    Tr=new Terrain (Double.parseDouble(Mots.get(i+1)),Double.parseDouble(Mots.get(i+2)),Double.parseDouble(Mots.get(i+3)),Double.parseDouble(Mots.get(i+4)));
                    setT(Tr);
                }
                
                //while (!("FINTRIANGLES".equals(Mots.get(i)))){
                    if ("Triangle".equals(Mots.get(i))){
                        double x1=Double.parseDouble(Mots.get(i+2));
                        double y1=Double.parseDouble(Mots.get(i+3));
                        PointTerrain PT1=new PointTerrain (x1,y1,0);
                        double x2=Double.parseDouble(Mots.get(i+4));
                        double y2=Double.parseDouble(Mots.get(i+5));
                        PointTerrain PT2=new PointTerrain (x2,y2,1);
                        double x3=Double.parseDouble(Mots.get(i+6));
                        double y3=Double.parseDouble(Mots.get(i+7));
                        PointTerrain PT3=new PointTerrain (x3,y3,2);
                        TriangleTerrain TT=new TriangleTerrain(PT1, PT2, PT3, Integer.parseInt(Mots.get(i+1)));
                        getlisteTT().add(TT);
                    }
                //}

                //while (!("FINCATALOGUE".equals(Mots.get(i)))){
                    if ("TypeBarre".equals(Mots.get(i))){
                        double cout=Double.parseDouble(Mots.get(i+2));
                        double Lmin=Double.parseDouble(Mots.get(i+3));
                        double Lmax=Double.parseDouble(Mots.get(i+4));
                        double Rc=Double.parseDouble(Mots.get(i+5));
                        double Rt=Double.parseDouble(Mots.get(i+6));
                        int nom=Integer.parseInt(Mots.get(i+1));
                        TypeBarre TB=new TypeBarre(nom, cout, Lmax, Lmin, Rt, Rc);
                        tableauTB.add(TB);
                    }
                //}
                //while (!("FINNOEUDS".equals(Mots.get(i)))){
                    if ("AppuiDouble".equals(Mots.get(i))){
                        int TT=Integer.parseInt(Mots.get(i+2));
                        int Point=Integer.parseInt(Mots.get(i+3));
                        double alpha =Double.parseDouble(Mots.get(i+4));
                        for (int j=0;j<getlisteTT().size();j++){
                            if (getlisteTT().get(j).getNOM()==TT){
                                if (getlisteTT().get(j).getPT1().getNom()==Point){
                                    Noeuds N =new Appui_Double (getlisteTT().get(j),getlisteTT().get(j).getPT1(), alpha, Integer.parseInt(Mots.get(i+1)));
                                    getlisteNoeuds().add(N);
                                    getlisteAD().add(N);
                                }
                                if (getlisteTT().get(j).getPT2().getNom()==Point){
                                    Noeuds N =new Appui_Double (getlisteTT().get(j),getlisteTT().get(j).getPT2(), alpha, Integer.parseInt(Mots.get(i+1)));
                                    getlisteNoeuds().add(N);
                                    getlisteAD().add(N);
                                }
                                if (getlisteTT().get(j).getPT3().getNom()==Point){
                                    Noeuds N =new Appui_Double (getlisteTT().get(j), getlisteTT().get(j).getPT3(), alpha, Integer.parseInt(Mots.get(i+1)));
                                    getlisteNoeuds().add(N);
                                    getlisteAD().add(N);
                                }
                            }
                        }
                    }
                    if ("AppuiSimple".equals(Mots.get(i))){
                        int TT=Integer.parseInt(Mots.get(i+2));
                        int Point=Integer.parseInt(Mots.get(i+3));
                        double alpha =Double.parseDouble(Mots.get(i+4));
                        for (int j=0;j<getlisteTT().size();j++){
                            if (getlisteTT().get(j).getNOM()==TT){
                                if (getlisteTT().get(j).getPT1().getNom()==Point){
                                    Noeuds N =new Appui_Simple (getlisteTT().get(j),getlisteTT().get(j).getPT1(), alpha, Integer.parseInt(Mots.get(i+1)));
                                        getlisteNoeuds().add(N);
                                        getlisteAS().add(N);
                                }
                                if (getlisteTT().get(j).getPT2().getNom()==Point){
                                    Noeuds N =new Appui_Simple (getlisteTT().get(j),getlisteTT().get(j).getPT2(), alpha, Integer.parseInt(Mots.get(i+1)));
                                        getlisteNoeuds().add(N);
                                        getlisteAS().add(N);
                                }
                                if (getlisteTT().get(j).getPT3().getNom()==Point){
                                    Noeuds N =new Appui_Simple (getlisteTT().get(j), getlisteTT().get(j).getPT3(), alpha, Integer.parseInt(Mots.get(i+1)));
                                        getlisteNoeuds().add(N);
                                        getlisteAS().add(N);
                                }
                            }
                        }
                    }
                    if ("NoeudSimple".equals(Mots.get(i))){
                        double x1=Double.parseDouble(Mots.get(i+2));
                        double y1=Double.parseDouble(Mots.get(i+3));
                        Noeuds N =new Noeud_Simple (x1, y1, Integer.parseInt(Mots.get(i+1)));
                        if (VerifListeNoeuds (getlisteNoeuds(),N)==true){
                            getlisteNoeuds().add(N);
                            getlisteNS().add(N);
                        }
                    }
                //}
                
                //while (!("FINBARRES".equals(Mots.get(i)))){
                    if ("Barre".equals(Mots.get(i))){
                        int typenum = Integer.parseInt(Mots.get(i+2));
                        double Noeudi=Double.parseDouble(Mots.get(i+3));
                        double Noeudf=Double.parseDouble(Mots.get(i+4));
                        Noeuds Ni = new Noeud_Simple ();
                        Noeuds Nfi = new Noeud_Simple ();
                        int num=0;
                        for (int j=0;j<getCatalogue().getEnsemble_TypeBarre().size();j++){
                            if (!(getCatalogue().getEnsemble_TypeBarre().get(j)==null)){
                                if (getCatalogue().getEnsemble_TypeBarre().get(j).getnom()==typenum){
                                    num=j;
                                }
                            }
                        }
                        for (int j=0;j<getlisteNoeuds().size();j++){
                            if (getlisteNoeuds().get(j).getnom()==Noeudi){
                                Ni=getlisteNoeuds().get(j);
                            } 
                            if (getlisteNoeuds().get(j).getnom()==Noeudf){
                                Nfi=getlisteNoeuds().get(j);
                            }
                        }
                        int v=0;
                        if (VerifListeBarrenulle(getlisteBarre())==false){
                            for (int j=0;j <getlisteBarre().size();j++){
                                if(getlisteBarre().get(j).getnom()==Integer.parseInt(Mots.get(i+1))){
                                    v=v+1;
                                }
                            }
                        }
                        if (v==0){
                            Barre B=new Barre (Ni, Nfi, Integer.parseInt(Mots.get(i+1)), getCatalogue(), num);
                            getlisteBarre().add(B);
                        }
                    }
                //}
            }
            Ca=new Catalogue_Barre (tableauTB);
            setCatalogue(Ca);
            System.out.println(getT().toString());
            System.out.println(Arrays.toString(getlisteTT().toArray()));
            Afficher_Catalogue_Barre(getCatalogue());
            System.out.println(Arrays.toString(getlisteNoeuds().toArray()));
            System.out.println(Arrays.toString(getlisteBarre().toArray()));
            //fermeture du scanner
            scnr.close();
            dispose();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(OuvrirUnFichier.class.getName()).log(Level.SEVERE, null, ex);
            new Erreur1().setVisible(true);
        }
    }//GEN-LAST:event_Ouverture

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OuvrirUnFichier.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OuvrirUnFichier.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OuvrirUnFichier.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OuvrirUnFichier.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OuvrirUnFichier().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField NomFichier;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
